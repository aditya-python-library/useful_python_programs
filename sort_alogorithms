"""
Sort - 1 : Bubble sort

Defination - simple sorting algorithm iterates over a list, comparing elements in pairs and swapping them until the larger elements "bubble up" to the end of the list
and the smaller elements stay at the "bottom".

Time Complexity - o(n^2) - As it as n iteration per per , so for n item - n*n
"""

def bubble_sort(sequence):
    """
    Pure implimentation of bubble sort
    """
    flag = True
    while flag:
        flag = False
        for index in range(len(sequence)-1):
            if sequence[index] > sequence[index + 1]:
                sequence[index], sequence[index+1] = sequence[index+1], sequence[index]
                flag = True


"""
Sort - 2 : Selection sort

Defination - This algorithm segments the list into two parts: sorted and unsorted. 
We continuously remove the smallest element of the unsorted segment of the list and append it to the sorted segment.

Time Complexity - o(n^2) - 
"""

def selection_sort(sequence):
    """
    Pure Implimentation of selection sort
    """
    for index in range(len(sequence)):
        lowest_index = index
        for inner_index in range(index+1, len(sequence)):
            if sequence[inner_index] < sequence[lowest_index]:
                lowest_index = inner_index
        sequence[index], sequence[lowest_index] = sequence[lowest_index], sequence[index]

"""
Sort - 3 : insertion sort

Defination - This algorithm segments the list into two parts: sorted and unsorted. 
We continuously remove the current viewed  element of the unsorted segment of the list and append it to the sorted segment.

Time Complexity - o(n^2) - 
"""

def insertion_sort(sequence):
    """
    Pure Implimentation of insertion sort
    """
    for index in range(1, len(sequence)):
        for inner_index in range(index-1, 0, -1):
            if sequence[index] > sequence[inner_index]:
                sequence[index], sequence[inner_index] = sequence[inner_index], sequence[index]
            else:
                break

"""
Sort - 4 : Merge sort

Defination - This divide and conquer algorithm splits a list in half, and keeps splitting the list by 2 until it only has singular elements.
Adjacent elements become sorted pairs, then sorted pairs are merged and sorted with other pairs as well. 
This process continues until we get a sorted list with all the elements of the unsorted input list.

Time Complexity - o(nlogn) - 
"""

def merge(left_list, right_list):
    sorted_list = []
    left_list_index = right_list_index = 0

    # We use the list lengths often, so its handy to make variables
    left_list_length, right_list_length = len(left_list), len(right_list)

    for _ in range(left_list_length + right_list_length):
        if left_list_index < left_list_length and right_list_index < right_list_length:
            # We check which value from the start of each list is smaller
            # If the item at the beginning of the left list is smaller, add it
            # to the sorted list
            if left_list[left_list_index] <= right_list[right_list_index]:
                sorted_list.append(left_list[left_list_index])
                left_list_index += 1
            # If the item at the beginning of the right list is smaller, add it
            # to the sorted list
            else:
                sorted_list.append(right_list[right_list_index])
                right_list_index += 1

        # If we've reached the end of the of the left list, add the elements
        # from the right list
        elif left_list_index == left_list_length:
            sorted_list.append(right_list[right_list_index])
            right_list_index += 1
        # If we've reached the end of the of the right list, add the elements
        # from the left list
        elif right_list_index == right_list_length:
            sorted_list.append(left_list[left_list_index])
            left_list_index += 1

    return sorted_list


def merge_sort(nums):
    # If the list is a single element, return it
    if len(nums) <= 1:
        return nums

    # Use floor division to get midpoint, indices must be integers
    mid = len(nums) // 2

    # Sort and merge each half
    left_list = merge_sort(nums[:mid])
    right_list = merge_sort(nums[mid:])

    # Merge the sorted lists into a new one
    return merge(left_list, right_list)
